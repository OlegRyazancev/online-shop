server:
  port: ${ORGANIZATION_PORT}
  servlet:
    context-path: /

spring:
  profiles:
    active: default
  config:
    import: classpath:openapi/open-api-config.yml
  application:
    name: organization


  #Kafka
  kafka:
    bootstrap-servers: localhost:29092
    topic:
      admin: ${KAFKA_REQUESTS_ADMIN_TOPIC}
      organization:
        register: ${KAFKA_REGISTER_ORGANIZATION_TOPIC}
        change-status: ${KAFKA_CHANGE_STATUS_ORGANIZATION_TOPIC}
      product: ${KAFKA_DELETE_PRODUCT_TOPIC}
      mail: ${KAFKA_MAIL_TOPIC}
    consumer:
      group-id: ${KAFKA_ORGANIZATION_GROUP}

  #PostgreSQL connection
  datasource:
    username: ${POSTGRES_USER}
    password: ${POSTGRES_PASSWORD}
    url: jdbc:postgresql://localhost:5432/${POSTGRES_ORGANIZATION_DATABASE}?currentSchema=${POSTGRES_ORGANIZATION_SCHEMA}
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
    show-sql: true

  #Redis
  cache:
    type: redis
    cache-names: redis-cache
  data:
    redis:
      host: localhost
      port: 6379
      password: ${REDIS_PASSWORD}

  #Liquibase
  liquibase:
    change-log: classpath:liquibase/db.changelog.yaml
    enabled: true

#Zipkin
management:
  tracing:
    sampling:
      probability: 1.0

  #Actuator Prometheus Endpoint
  endpoints:
    web:
      exposure:
        include: prometheus
  prometheus:
    metrics:
      export:
        enabled: true
  metrics:
    distribution:
      percentiles-histogram:
        "[http.server.requests]": true

#Eureka
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka
    fetch-registry: true
    register-with-eureka: true

#OpenApi
openapi:
  service:
    url: http://localhost:8080
springdoc:
  api-docs:
    path: /v3/api-docs/organization
  swagger-ui:
    path: /swagger-ui.html/organization